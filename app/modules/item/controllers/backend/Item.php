<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Item extends MY_Controller {	public $module;	function __construct() {		parent::__construct();		if(!isset($this->auth) || is_array($this->auth) == FALSE || count($this->auth) == 0 ) redirect(BACKEND_DIRECTORY);		$this->load->library(array('configbie'));		$this->module = 'item';	}		public function view($page = 1){		$this->commonbie->permission("item/backend/item/view", $this->auth['permission']);		$page = (int)$page;		$data['from'] = 0;		$data['to'] = 0;				$extend = (!in_array('item/backend/item/viewall', json_decode($this->auth['permission'], TRUE))) ? 'userid_created = '.$this->auth['id'].'' : '';		$perpage = ($this->input->get('perpage')) ? $this->input->get('perpage') : 20;		$keyword = $this->db->escape_like_str($this->input->get('keyword'));        $config['total_rows'] = $this->Autoload_Model->_get_where(array(            'select' => 'id',            'table' => 'item',            'where_extend' => $extend,            'keyword' => '(title LIKE \'%'.$keyword.'%\' )',            'count' => TRUE,        ));				if($config['total_rows'] > 0){			$this->load->library('pagination');			$config['base_url'] = base_url('item/backend/item/view');			$config['suffix'] = $this->config->item('url_suffix').(!empty($_SERVER['QUERY_STRING'])?('?'.$_SERVER['QUERY_STRING']):'');			$config['first_url'] = $config['base_url'].$config['suffix'];			$config['per_page'] = $perpage;			$config['uri_segment'] = 5;			$config['use_page_numbers'] = TRUE;			$config['full_tag_open'] = '<ul class="pagination no-margin">';			$config['full_tag_close'] = '</ul>';			$config['first_tag_open'] = '<li>';			$config['first_tag_close'] = '</li>';			$config['last_tag_open'] = '<li>';			$config['last_tag_close'] = '</li>';			$config['cur_tag_open'] = '<li class="active"><a class="btn-primary">';			$config['cur_tag_close'] = '</a></li>';			$config['next_tag_open'] = '<li>';			$config['next_tag_close'] = '</li>';			$config['prev_tag_open'] = '<li>';			$config['prev_tag_close'] = '</li>';			$config['num_tag_open'] = '<li>';			$config['num_tag_close'] = '</li>';			$this->pagination->initialize($config);			$data['PaginationList'] = $this->pagination->create_links();			$totalPage = ceil($config['total_rows']/$config['per_page']);			$page = ($page <= 0)?1:$page;			$page = ($page > $totalPage)?$totalPage:$page;			$page = $page - 1;			$data['from'] = ($page * $config['per_page']) + 1;			$data['to'] = ($config['per_page']*($page+1) > $config['total_rows']) ? $config['total_rows']  : $config['per_page']*($page+1);            $data['listitem'] = $this->Autoload_Model->_get_where(array(                'select' => '*, (SELECT fullname FROM user WHERE user.id = item.userid_created) as user_created ',                'table' => 'item',                'where_extend' => $extend,                'limit' => $config['per_page'],                'start' => $page * $config['per_page'],                'keyword' => '(title LIKE \'%'.$keyword.'%\')',                'order_by' => 'created desc',            ), TRUE);        }		$data['script'] = 'item';		$data['config'] = $config;		$data['template'] = 'item/backend/item/view';		$this->load->view('dashboard/backend/layout/dashboard', isset($data)?$data:NULL);	}		public function Create(){		$this->commonbie->permission("item/backend/item/create", $this->auth['permission']);		if($this->input->post('create')){			$this->load->library('form_validation');			$this->form_validation->CI =& $this;			$this->form_validation->set_error_delimiters('','/');			$this->form_validation->set_rules('title', 'Tiêu đề bài viết', 'trim|required');			if($this->form_validation->run($this)){				$image = $this->input->post('image');                $album = $this->input->post('albumCH');                $album_data = '';                if(isset($album['title']) && is_array($album['title'])  && count($album['title'])) {                    foreach ($album['title'] as $key => $val) {                        $album_data[] = array('title' => $val);                    }                }                if(isset($album_data) && is_array($album_data)  && count($album_data) && isset($album['images']) && is_array($album['images']) && count($album['images'])&& isset($album['description']) && is_array($album['description']) && count($album['description'])) {                    foreach ($album_data as $key => $val) {                        $album_data[$key]['images'] = $album['images'][$key];                        $album_data[$key]['description'] = $album['description'][$key];                    }                }				$_insert = array(					'title' => htmlspecialchars_decode(html_entity_decode($this->input->post('title'))),					'slug' => slug(htmlspecialchars_decode(html_entity_decode($this->input->post('title')))),					'canonical' => slug($this->input->post('canonical')),					'catalogueid' => $this->input->post('catalogueid'),					'meta_title' => $this->input->post('meta_title'),					'meta_description' => $this->input->post('meta_description'),					'publish' => $this->input->post('publish'),					'description' => $this->input->post('description'),					'b_1' => $this->input->post('b_1'),					'b_2' => $this->input->post('b_2'),					'b_3' => json_encode($album_data),					'c_1' => $this->input->post('c_1'),					'c_2' => $this->input->post('c_2'),					'c_3' => $this->input->post('c_3'),					'banner' => $this->input->post('banner'),					'image' => $image,                    'userid_created' => $this->auth['id'],					'created' => gmdate('Y-m-d H:i:s', time() + 7*3600),                    'alanguage' => $this->fclang,				);													$resultid = $this->Autoload_Model->_create(array(					'table' => 'item',					'data' => $_insert,				));				if($resultid > 0){                    $canonical = slug($this->input->post('canonical'));                    if(!empty($canonical)){                        $router = array(                            'canonical' => $canonical,                            'crc32' => sprintf("%u", crc32($canonical)),                            'uri' => 'item/frontend/item/view',                            'param' => $resultid,                            'type' => 'number',                            'created' => gmdate('Y-m-d H:i:s', time() + 7*3600),                        );                        $routerid = $this->Autoload_Model->_create(array(                            'table' => 'router',                            'data' => $router,                        ));                    }										$this->session->set_flashdata('message-success', 'Thêm bài viết mới thành công');					redirect('item/backend/item/view');				}			}		}		$data['script'] = 'item';		$data['template'] = 'item/backend/item/create';		$this->load->view('dashboard/backend/layout/dashboard', isset($data)?$data:NULL);	}		public function Update($id = 0){								$this->commonbie->permission("item/backend/item/update", $this->auth['permission']);		$id = (int)$id;		$detailitem = $this->Autoload_Model->_get_where(array(			'select' => '*',			'table' => 'item',			'where' => array('id' => $id),		));		if(!isset($detailitem) || is_array($detailitem) == false || count($detailitem) == 0){			$this->session->set_flashdata('message-danger', 'bài viết không tồn tại');			redirect('item/backend/item/view');		}		if($this->input->post('update')){			$this->load->library('form_validation');			$this->form_validation->CI =& $this;			$this->form_validation->set_error_delimiters('','/');			$this->form_validation->set_rules('title', 'Tiêu đề bài viết', 'trim|required');			$this->form_validation->set_rules('canonical', 'Đường dẫn bài viết', 'trim|required|callback__CheckCanonical');			if($this->form_validation->run($this)){                $album = $this->input->post('albumCH');                $album_data = '';                if(isset($album['title']) && is_array($album['title'])  && count($album['title'])) {                    foreach ($album['title'] as $key => $val) {                        $album_data[] = array('title' => $val);                    }                }                if(isset($album_data) && is_array($album_data)  && count($album_data) && isset($album['images']) && is_array($album['images']) && count($album['images'])&& isset($album['description']) && is_array($album['description']) && count($album['description'])) {                    foreach ($album_data as $key => $val) {                        $album_data[$key]['images'] = $album['images'][$key];                        $album_data[$key]['description'] = $album['description'][$key];                    }                }				$_update = array(					'title' => htmlspecialchars_decode(html_entity_decode($this->input->post('title'))),					'slug' => slug(htmlspecialchars_decode(html_entity_decode($this->input->post('title')))),					'canonical' => slug($this->input->post('canonical')),					'meta_title' => $this->input->post('meta_title'),					'meta_description' => $this->input->post('meta_description'),					'publish' => $this->input->post('publish'),					'image' => $this->input->post('image'),					'description' => $this->input->post('description'),                    'catalogueid' => $this->input->post('catalogueid'),                    'b_1' => $this->input->post('b_1'),                    'b_2' => $this->input->post('b_2'),                    'b_3' => json_encode($album_data),                    'c_1' => $this->input->post('c_1'),                    'c_2' => $this->input->post('c_2'),                    'c_3' => $this->input->post('c_3'),					'userid_updated' => $this->auth['id'],                    'alanguage' => $this->fclang,					'updated' => gmdate('Y-m-d H:i:s', time() + 7*3600),                    'banner' => $this->input->post('banner'),				);				$flag = $this->Autoload_Model->_update(array(					'where' => array('id' => $id),					'table' => 'item',					'data' => $_update,				));				if($flag > 0){                    $canonical = slug($this->input->post('canonical'));                    if(!empty($canonical)){                        $this->Autoload_Model->_delete(array(                            'where' => array('canonical' => $detailitem['canonical'],'uri' => 'item/frontend/item/view','param' => $id),                            'table' => 'router',                        ));                        $router = array(                            'canonical' => $canonical,                            'crc32' => sprintf("%u", crc32($canonical)),                            'uri' => 'item/frontend/item/view',                            'param' => $id,                            'type' => 'number',                            'created' => gmdate('Y-m-d H:i:s', time() + 7*3600),                        );                        $routerid = $this->Autoload_Model->_create(array(                            'table' => 'router',                            'data' => $router,                        ));                    }					$this->session->set_flashdata('message-success', 'Cập nhật bài viết thành công');					redirect('item/backend/item/view');				}			}		}						$data['script'] = 'item';		$data['detailitem'] = $detailitem;		$data['template'] = 'item/backend/item/update';		$this->load->view('dashboard/backend/layout/dashboard', isset($data)?$data:NULL);	}		public function _CheckCanonical($canonical = ''){		$originalCanonical = $this->input->post('original_canonical');		if($canonical != $originalCanonical){			$crc32 = sprintf("%u", crc32(slug($canonical)));			$router = $this->Autoload_Model->_get_where(array(				'select' => 'id',				'table' => 'router',				'where' => array('crc32' => $crc32),				'count' => TRUE			));			if($router > 0){				$this->form_validation->set_message('_CheckCanonical','Đường dẫn đã tồn tại, hãy chọn một đường dẫn khác');				return false;			}		}		return true;	}		}